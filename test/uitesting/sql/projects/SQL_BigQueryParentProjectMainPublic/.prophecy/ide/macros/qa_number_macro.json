{
  "macro_d7L84VQE" : {
    "name" : "qa_concat_macro",
    "macroId" : "macro_d7L84VQE",
    "macroType" : "expression",
    "definition" : "concat({{input_string_column}} || ' hi', LEFT({{input_string_column}}, 3), FORMAT('%T', LPAD('abc', 5)), LOWER({{input_string_column}}), CONCAT('#', LTRIM('.  aasd.    '), '#'), TRANSLATE('This is a cookie', 'sko', 'zku'), CAST(FROM_BASE64('/+A=') AS string), CAST(FROM_HEX('0AF') AS string), NORMALIZE('\\u00ea'), NORMALIZE_AND_CASEFOLD('the red bar'), ARRAY_TO_STRING(REGEXP_EXTRACT_ALL('asdqwe asd 2132', '`(.+?)`'), '--'), REGEXP_REPLACE('# Another heading', r'^# ([a-zA-Z0-9\\s]+$)', '<h1>\\\\1</h1>'), REGEXP_SUBSTR('Hello World Helloo', 'H?ello+', 1, 1), REPLACE('apple cobbler', 'pie', 'cobbler'), REPEAT('asd', 2), REVERSE('asdas 324 123@#$%#@$ asd'), RIGHT('example', 3), RPAD('?? c', 5, '??'), RTRIM('**sasd 8*8**', '*'), SAFE_CONVERT_BYTES_TO_STRING(b'\\xc2'), SOUNDEX('hello'), ARRAY_TO_STRING(SPLIT('h e lllo son', ' '), ' '), SUBSTR('asdsditem', 2), SUBSTRING('asdsditem', 2, 2), TO_BASE32(b'abcde\\xFF'), TO_BASE64(b'\\377\\340'), REPLACE(REPLACE(TO_BASE64(b'\\377\\340'), '+', '-'), '/', '_'), TO_HEX(b'foobar'), TRANSLATE('This is a cookie', 'sko', 'zku'), TRIM('*   **as**', '*'), TRIM('abaW?', 'Y?'), CAST(TRIM(b'apple', b'na\\xab') AS string), UPPER('item'), STRING(JSON_QUERY(JSON '{\"class\":{\"students\":[{\"id\":5},{\"name\":\"abhishek\"}]}}', \"$.class.students[0].name\")), STRING(JSON_QUERY(JSON '{\"name\": \"sky\", \"color\": \"blue\"}', \"$.color\")), JSON_EXTRACT_SCALAR('{\"a.b\": {\"c\": \"world\"}}', \"$['a.b'].c\"), JSON_VALUE(JSON '{ \"name\" : \"Jakob\", \"age\" : \"6\" }', '$.age'), JSON_VALUE(PARSE_JSON('{ \"name\" : \"Jakob\", \"age\" : \"6\" }'), '$.age'), JSON_TYPE(JSON '{\"name\": \"sky\", \"color\" : \"blue\"}'), ARRAY_TO_STRING(ARRAY_CONCAT(['1', '2'], ['3', '4'], ['5', '6']), '-'), ARRAY_TO_STRING(ARRAY_REVERSE(['a', 'b']), '-'), CAST(CURRENT_DATE() AS string), CAST(EXTRACT(DAY FROM DATE'2013-12-25') AS string), CAST(DATE(2016, 12, 25) AS string), CAST(DATE(DATETIME '2016-12-25 23:59:59') AS string), CAST((DATE_ADD(DATE'2008-12-25', INTERVAL 5 DAY)) AS string), CAST((DATE_SUB(DATE'2008-12-25', INTERVAL 5 DAY)) AS string), CAST(DATE_FROM_UNIX_DATE(14238) AS string), FORMAT_DATE('%x', DATE'2008-12-25'), FORMAT_DATE('%b %Y', DATE'2008-12-25'), CAST(LAST_DAY(DATE'2008-11-25') AS string), CAST(PARSE_DATE('%A %b %e %Y', 'Thursday Dec 25 2008') AS string), CAST(PARSE_DATE('%Y%m%d', '20081225') AS string), CAST(UNIX_DATE(DATE'2008-12-25') AS string), CAST(CURRENT_DATETIME() AS string), CAST(DATETIME(TIMESTAMP'2008-12-25 05:30:00+00', \"America/Los_Angeles\") AS string), CAST(DATETIME_ADD(DATETIME \"2008-12-25 15:30:00\", INTERVAL 10 MINUTE) AS string), CAST(DATETIME_SUB(DATETIME \"2008-12-25 15:30:00\", INTERVAL 10 MINUTE) AS string), CAST(DATETIME_DIFF(DATETIME \"2010-07-07 10:20:00\", DATETIME \"2008-12-25 15:30:00\", DAY) AS string), CAST(DATETIME_TRUNC(DATETIME \"2008-12-25 15:30:00\", DAY) AS string), CAST(FORMAT_DATETIME(\"%b-%d-%Y\", DATETIME \"2008-12-25 15:30:00\") AS string), CAST(LAST_DAY(DATETIME '2008-11-25', MONTH) AS string), CAST(LAST_DAY(DATETIME '2008-11-10 15:30:00', WEEK(SUNDAY)) AS string), CAST(LAST_DAY(DATETIME '2008-11-10 15:30:00', WEEK(MONDAY)) AS string), CAST(PARSE_DATETIME(\"%c\", \"Thu Dec 25 07:30:00 2008\") AS string), CAST(PARSE_DATETIME(\"%a %b %e %I:%M:%S %Y\", \"Thu Dec 25 07:30:00 2008\") AS string))",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "input_string_column",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false
      } ]
    },
    "staleState" : "none"
  },
  "macro_eFCLvuqg" : {
    "name" : "qa_macro_call_another_macro",
    "macroId" : "macro_eFCLvuqg",
    "macroType" : "expression",
    "definition" : "concat({{ SQL_BigQueryParentProjectMain.qa_concat_macro(final_param_string_only) }}, '{{final_param_string_only}}')",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "final_param_string_only",
        "kind" : {
          "type" : "value",
          "value" : "'random data'"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false
      } ]
    },
    "staleState" : "none"
  },
  "macro_SyNGP4jw" : {
    "name" : "qa_concat_macro_column",
    "macroId" : "macro_SyNGP4jw",
    "macroType" : "expression",
    "definition" : "concat({{param1_column}}, 'hellomain')",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "param1_column",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false
      } ]
    },
    "staleState" : "none"
  },
  "macro_fRXuf7at" : {
    "name" : "multi_macro_expressions",
    "macroId" : "macro_fRXuf7at",
    "macroType" : "expression",
    "definition" : "concat({{param_float}} + {{param_array[0]}}, 'hello')",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "param_float",
        "kind" : {
          "type" : "value",
          "value" : "12"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false
      }, {
        "name" : "param_array",
        "kind" : {
          "type" : "value",
          "value" : "[1, 2, 3]"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false
      }, {
        "name" : "param_dict",
        "kind" : {
          "type" : "value",
          "value" : "[1, 2, 3]"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false
      } ]
    },
    "staleState" : "none"
  },
  "macro_VQfLNJxv" : {
    "name" : "qa_macro_call_another_macro_column",
    "macroId" : "macro_VQfLNJxv",
    "macroType" : "expression",
    "definition" : "concat({{ SQL_BigQueryParentProjectMain.qa_concat_macro_column(param_column) }}, {{param_column}})",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "param_column",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false
      } ]
    },
    "staleState" : "none"
  },
  "macro_ZCyBUGkS" : {
    "name" : "qa_number_macro",
    "macroId" : "macro_ZCyBUGkS",
    "macroType" : "expression",
    "definition" : "(10 * 2) / 5 + 10 - 3 + abs(-10) + SIGN(-1) + IEEE_DIVIDE({{input_number_column}}, 4.0) + RAND() + SQRT(25.0) + pow(2, 3) - power(2, 3) + exp(1) + ln(1) + log({{input_number_column}}, 10) + log10(10) + GREATEST(1, 2, {{input_number_column}}, 4, 5.23, 0, -10) + LEAST(1, 2, 3, 4, 5.23, 0, -10) + div(10, 10) + SAFE_DIVIDE(0, 20) + SAFE_MULTIPLY(1, 2) + SAFE_NEGATE(2000) + SAFE_ADD(1, 2) + SAFE_SUBTRACT(10, 20000) + mod(10, 2) + ROUND(2.8) + ROUND(-2.3) + ROUND(NUMERIC \"2.25\", 1, \"ROUND_HALF_EVEN\") + ROUND(NUMERIC \"-2.5\", 0, \"ROUND_HALF_AWAY_FROM_ZERO\") + trunc(-2.3323) + ceil(-2.8) + ceiling(-2.8) + floor(2.3) + cos(12) + cosh(1) + ACOS(0.123) + ACOSH(1) + COT(1) + SAFE.COT(0) + COTH(1) + SAFE.COTH(1) - CSC(100) + SAFE.CSC(100) + CSCH(0.5) + SEC(100) + SECH(0.5) + SIN(0.2) + SINH(0.2) + ASIN(0.2) + ASINH(0.1) + TAN(1) + TANH(1) + ATAN(1) + ATANH(0.12321) + ATAN2(1, 2) + CBRT(27) + RANGE_BUCKET(20, [0, 10, 20, 30, 40]) + RANGE_BUCKET('a', ['a', 'b', 'c', 'd']) + BYTE_LENGTH('?????') + CHAR_LENGTH('asdasd?????') + CHARACTER_LENGTH('asdasd?????') + INSTR('banana', 'an', 1, 2) + LENGTH('?????') + OCTET_LENGTH('sadasd') + REGEXP_INSTR('abhisheks@gmail.com', '@[^.]*') + STRPOS('abhishek@gmail.com', '@') + UNICODE('?') + INT64(JSON_QUERY(JSON '{\"gate\": \"A4\", \"flight_number\": 2}', \"$.flight_number\")) + FLOAT64(JSON_QUERY(JSON '{\"vo2_max\": 2.1, \"age\": 18}', \"$.vo2_max\")) + ARRAY_LENGTH([1, 2]) + EXTRACT(HOUR FROM DATETIME(2008, 12, 25, 15, 30, 0)) - EXTRACT(WEEK(SUNDAY) FROM DATETIME(TIMESTAMP'2017-11-05 00:00:00+00', \"UTC\")) + EXTRACT(HOUR FROM TIME \"15:30:00\") - EXTRACT(MONTH FROM (INTERVAL '1-2 3 4:5:6.789999' YEAR TO SECOND))",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "input_number_column",
        "kind" : {
          "type" : "value",
          "value" : "10"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false
      } ]
    },
    "staleState" : "none"
  },
  "macro_OG88sovO" : {
    "name" : "round_function",
    "macroId" : "macro_OG88sovO",
    "macroType" : "expression",
    "definition" : "ROUND({{n1}}, {{scale}})",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "n1",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false
      }, {
        "name" : "scale",
        "kind" : {
          "type" : "value",
          "value" : "2"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false
      } ]
    },
    "staleState" : "none"
  },
  "macro_exuIac5D" : {
    "name" : "qa_boolean_macro",
    "macroId" : "macro_exuIac5D",
    "macroType" : "expression",
    "definition" : "(10 < 20) or (20 < 30) or (20 <= 30) or ({{input_int_column}} >= 30) or ({{input_int_column}} <> 10) or (20 = 10) or ({{input_int_column}} BETWEEN 10 and 21) or (10 IN (20, 10, 30)) or ((20 >= 30) IS TRUE) or ((20 >= 30) IS NOT TRUE) or ((20 >= 30) IS FALSE) or ((20 >= 30) IS NOT FALSE) or ((10 > 20) IS UNKNOWN) or ((10 > 20) IS NOT UNKNOWN) or ((10 > 20) IS NOT NULL) or ((10 > 20) IS NULL) or (COLLATE('Foo', 'und:ci') LIKE COLLATE('%foo%', 'und:ci')) or ('MASSE' LIKE 'Ma?e') or ('\\u3042' LIKE '%\\u30A2%') or (CASE\n  WHEN 12 > 10\n    THEN True\n  WHEN 12 < 10\n    THEN False\n  ELSE True\nEND) or (COALESCE(NULL, 'B', 'C') = 'B') or (IF(12 < 22, 'true', 'false') = 'true') or (IFNULL(NULL, 0) = 0) or (NULLIF(10, 0) = 10) or (CAST('1' AS string) = '1') or (CAST('1' AS string) = '1') or (CAST('1' AS BIGNUMERIC) = 1) or (CAST('TRUE' AS BOOL) = TRUE) or (CAST(CAST('hi' AS BYTES) AS STRING) = 'hi') or (CAST('2021-04-20' AS DATE) = DATE'2020-09-22') or (CAST('2021-04-20 00:00:00' AS TIMESTAMP) = TIMESTAMP'2020-09-22 00:00:00') or (CAST('23.45' AS FLOAT64) = 23.45) or (CAST('-23' AS INT64) = -23) or (CAST('-0x123' AS INT64) = -291) or (CAST('123' AS NUMERIC) = 123) or (CAST(b'\\x48\\x65\\x6c\\x6c\\x6f' AS STRING FORMAT 'ASCII') = 'Hello') or (CAST(CURRENT_DATE() AS STRING) = '2020-12-12') or (CAST(CURRENT_DATE() AS STRING FORMAT 'DAY') = 'MONDAY') or (CAST(TIMESTAMP'2008-12-25 00:00:00+00:00' AS STRING FORMAT 'YYYY-MM-DD HH24:MI:SS TZH:TZM') = '2008-12-25 00:00:00+00:00') or (CAST(TIMESTAMP'2008-12-25 00:00:00+00:00' AS STRING FORMAT 'YYYY-MM-DD HH24:MI:SS TZH:TZM' AT TIME ZONE 'Asia/Kolkata') = '2008-12-25 00:00:00+00:00') or ((CAST('18-12-03' AS DATE FORMAT 'YY-MM-DD') = CAST('18-12-03' AS DATE FORMAT 'YY-MM-DD'))) or (CAST('DEC 03, 2018' AS DATE FORMAT 'MON DD, YYYY') = CAST('DEC 03, 2018' AS DATE FORMAT 'MON DD, YYYY')) or (CAST('15:30' AS TIME FORMAT 'HH24:MI') = CAST('15:30' AS TIME FORMAT 'HH24:MI')) or (CAST('03:30 P.M.' AS TIME FORMAT 'HH:MI P.M.') = CAST('03:30 P.M.' AS TIME FORMAT 'HH:MI P.M.')) or (CAST('03:30 P.M.' AS TIME FORMAT 'HH:MI A.M.') = CAST('03:30 P.M.' AS TIME FORMAT 'HH:MI A.M.')) or (CAST(-12345.678 AS STRING FORMAT '$999,999.999') = '-$12,345.678') or (CAST(-123456 AS STRING FORMAT '9.999EEEE') = '-1.235E+05') or (PARSE_BIGNUMERIC(\"  -  123.45 \") = 123.45) or (PARSE_BIGNUMERIC(\"  1,2,,3,.45 + \") = 123.25) or (PARSE_NUMERIC(\"12.34e-1-\") = -1.234) or (SAFE_CAST(\"apple\" AS INT64) IS NULL) or (ARRAY_TO_STRING(['asd', 'asd'], '--') = 'asd--asd') or (TO_BASE64(b'\\377\\340') IS NULL) or (SAFE_CONVERT_BYTES_TO_STRING(b'\\xc2') IS NULL) or is_inf(CAST('Infinity' AS float64)) or is_nan(CAST('NaN' AS float64)) or (CONTAINS_SUBSTR('the blue house', 'Blue house')) or (CONTAINS_SUBSTR((23, 35, 41), '35')) or (CONTAINS_SUBSTR(('abc', ['def', 'ghi', 'jkl'], 'mno'), 'jk')) or (CONTAINS_SUBSTR(JSON '{\"lunch\":\"soup\"}', \"lunch\", json_scope => \"JSON_VALUES\")) or (CONTAINS_SUBSTR(JSON '{\"lunch\":\"soup\"}', \"lunch\", json_scope => \"JSON_KEYS_AND_VALUES\")) or (ENDS_WITH('test random string annother', 'e')) or (REGEXP_CONTAINS('abhishek@prophecy.io', r'@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+')) or (REGEXP_CONTAINS('abhishek@prophecy.io', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$')) or (STARTS_WITH('asdasdasd', 'b')) or (BOOL(JSON_QUERY(JSON '{\"hotel class\": \"5-star\", \"vacancy\": true}', \"$.vacancy\"))) or (SAFE.FLOAT64(JSON '\"strawberry\"') IS NULL)",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "input_int_column",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false
      } ]
    },
    "staleState" : "none",
    "propertiesFile" : {
      "name" : "functions",
      "content" : "---\nversion: 2\nmacros:\n- name: \"qa_boolean_macro\"\n  arguments:\n  - name: \"input_int_column\"\n    type: \"unknown\"\n  macroType: \"expression\"\n",
      "path" : "SQL_BigQueryParentProjectMain/macros/functions/functions.yml",
      "projectConfiguration" : null,
      "folderConfiguration" : {
        "version" : 2,
        "macros" : [ {
          "name" : "qa_boolean_macro",
          "arguments" : [ {
            "name" : "input_int_column",
            "type" : "unknown"
          } ],
          "macroType" : "expression"
        } ]
      },
      "packagesYml" : null
    }
  }
}